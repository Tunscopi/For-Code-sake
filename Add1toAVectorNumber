// Find the contiguous subarray w/largest sum

// My Approach: 
class Solution {
public:
	Solution::Solution(); // Constructor
	vector<int> A;
	vector<int> Solution::plusOne() {
		bool isNextSum = 0, isLeadZeros = 1;
		if (A.empty()) return A;
		if (A[A.size() - 1] < 9)
			A[A.size() - 1] += 1;
		else{
			if (A.size() == 1) { A[0] = 0; A.emplace(A.begin(), 1); goto here;} // For a 1 element vec.
			isNextSum = 1; A[A.size() - 1] = 0;
		}

		for (int i = A.size() - 2; i >= 0; i--)
		{
			if (isNextSum){
				if (A[i] == 9){
					A[i] = 0;
					if (i == 0)
						A.emplace(A.begin(), 1);   // logic to place 1 at begin of vec.
				}
				else {
					A[i] += 1; isNextSum = 0;
				}
			}
			else // Check for leading zeros
			{
				for (int j = 0; j = i; j++){
					if (A[0] > 0)  goto here;
					else
						A.erase(A.begin());
				}
			}
		}
	here:
		return A;
	}
};

Solution::Solution()
{
	int Arr[] { 0, 6, 0, 6, 4, 8, 8, 1 };
	
	for (int i = 0; i < sizeof(Arr) / sizeof(*Arr); i++)
		A.push_back(Arr[i]);
}

int main()
{
	Solution Test;
	Test.plusOne();

	cin.get();
	return 0;



// Solution
class Solution {
    public:
        vector<int> plusOne(vector<int> &digits) {
            reverse(digits.begin(), digits.end());
            vector<int> ans;
            int carry = 1;
            for (int i = 0; i < digits.size(); i++) {
                int sum = digits[i] + carry;
                ans.push_back(sum%10);
                carry = sum / 10;
            }
            while (carry) {
                ans.push_back(carry%10);
                carry /= 10;
            }
            while (ans[ans.size() - 1] == 0 && ans.size() > 1) {
                ans.pop_back();
            }
            reverse(ans.begin(), ans.end());
            reverse(digits.begin(), digits.end());
            return ans;
        }
};


	
	
	
	
	
}
