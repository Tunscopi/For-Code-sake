#include <iostream>
#include <vector>
#include <algorithm>
#include "limits.h"

using namespace std;

class Solution {
public:
	Solution::Solution(); // Constructor
	vector<int> A;
	vector<int> Solution::wave() {
		vector <int> Wave_vec;
		bool toToggle = 1;
		std::sort(A.begin(), A.end());  // Sort
		Wave_vec.push_back(A[1]); Wave_vec.push_back(A[0]);// Primer
		int index = 0;
		// Alternate items
		for (int i = 1; i < A.size() - 1; i++)
		{ 
			if (index + 3 == A.size()) { index--; toToggle = 1;}
			else if (index + 3 > A.size()) toToggle = 0;

			if (toToggle) {
				Wave_vec.push_back(A[index += 3]);
				toToggle = 0;
			}
			else{
				Wave_vec.push_back(A[index -= 1]);
				toToggle = 1;
			}

		}
		return Wave_vec;
	}
};

Solution::Solution()
{
	//int Arr[] {-846930886, -1714636915, 424238335, -1649760492};
	//int Arr[] {1,2,5,-7,2,5};
	//int Arr[] {-1, -1, -1, -1, -1};
	//int Arr[] {756898537, -1973594324, -2038664370, -184803526, 1424268980};
	
	int Arr[] {6, 12, 9, 1, 2, 7};
	//int Arr[] {5,1,3,2,4};
	//int Arr[] {6, 17, 15, 13};
	for (int i = 0; i < sizeof(Arr) / sizeof(*Arr); i++)
		A.push_back(Arr[i]);
}

int main()
{
	Solution Test;
	//vector <int>
	Test.wave();

	cin.get();
	return 0;
}
