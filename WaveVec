#include <iostream>
#include <vector>
#include <algorithm>
#include "limits.h" // sort library

using namespace std;

class Solution {
public:
	Solution::Solution(); // Constructor
	vector<int> A;
	vector<int> Solution::wave() {
		vector <int> Wave_vec;
		bool toToggle = 0;
		if (A.empty()) return Wave_vec;
		if (A.size() == 1) {
		Wave_vec.push_back(A[0]);  
		return Wave_vec; }
		
		std::sort(A.begin(), A.end());  // Sort
		Wave_vec.push_back(A[1]);  // Primer
		
		int index = 1;
		// Alternate items
		for (int i = 1; i < A.size(); i++)
		{ 
			if (toToggle) {
				if (index + 3 == A.size()) { index--; toToggle = 1; }
				else if (index + 3 > A.size()) { index = A.size() - 4;  toToggle = 0; }
				Wave_vec.push_back(A[index += 3]);
				toToggle = 0;
			}
			else{
				Wave_vec.push_back(A[index -= 1]);
				toToggle = 1;
			}

		}
		return Wave_vec;
	}
};

Solution::Solution()
{
	//int Arr[] {6, 12, 9, 1, 2, 7};
	//int Arr[] {5,1,3,2,4};
	//int Arr[] {6, 17, 15, 13};
	int Arr[] {19};
	for (int i = 0; i < sizeof(Arr) / sizeof(*Arr); i++)
		A.push_back(Arr[i]);
}

int main()
{
	Solution Test;
	//vector <int>
	Test.wave();

	cin.get();
	return 0;
}
