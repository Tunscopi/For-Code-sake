#include <iostream>
#include <vector>
#include <algorithm>
#include "limits.h" // sort library
#include "Windows.h""

// Minimum number of steps required to cover infinite grid in 2D array
using namespace std;


class Solution {

public:
	int no_steps = 0;

	int Solution::coverPoints(vector<int> &X, vector<int> &Y) {
		
		for (int i = 1; i < X.size(); i++){
			if ((abs(X[i] == X[i - 1])) && (abs(Y[i] == Y[i - 1]))){   // Dont increment if they are at the same position

			}
			else if ((abs(X[i] - X[i - 1]) <= 1) && (abs(Y[i] - Y[i - 1]) <= 1)){    // Check if within 1 step
				no_steps += 1;
			}
			else {  // greater than 1 step
				if (abs(X[i] - X[i - 1]) > abs(Y[i] - Y[i - 1]))
					no_steps += abs(X[i] - X[i - 1]);
				else
					no_steps += abs(Y[i] - Y[i - 1]);
			}
		}

		return no_steps;

	}
};


int main()
{
	int X_pos[] {0, 1, 1};
	int Y_pos[] {0, 1, 2};

	vector <int> X, Y;
	// Populate vectors
	for (int i = 0; i < 3; i++){
		X.push_back(X_pos[i]);
		Y.push_back(Y_pos[i]);
	}

	Solution Test;
	std::cout << "Min. no. of steps: " << Test.coverPoints(X, Y) << endl;


	cin.get();
	return 0;
}
