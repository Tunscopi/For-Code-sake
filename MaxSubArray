// Approach 1: 0(n!)
int Solution::maxSubArray(const vector<int> &A) {
	// Brute force approach
	int max_sum =  A[0], temp_sum;
	for (int i = 0; i < A.size(); i++)
	{	
		for (int j = i; j < A.size(); j++)
		{
			temp_sum += A[j];
			if (temp_sum > max_sum) max_sum = temp_sum;
		}
		temp_sum = 0;
	}
	return max_sum;
}


// Approach 2: 0(n)
int maxSubArray(const vector<int> &A) {
	int n = A.size();
	int curSum = 0, maxSum = -1000000000;
	for (int i = 0; i < n; i++) {
		curSum += A[i];
		maxSum = max(maxSum, curSum);
		if (curSum < 0) curSum = 0;
	}
	return maxSum;
}
